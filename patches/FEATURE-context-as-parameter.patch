diff -Naur a/src/com/ibm/zurich/idmx/issuance/IssuanceSpec.java b/src/com/ibm/zurich/idmx/issuance/IssuanceSpec.java
--- a/src/com/ibm/zurich/idmx/issuance/IssuanceSpec.java	2012-02-06 11:31:44.000000000 +0100
+++ b/src/com/ibm/zurich/idmx/issuance/IssuanceSpec.java	2013-07-26 15:31:17.191236613 +0200
@@ -99,4 +99,11 @@
         }
         return context;
     }
+
+    /**
+     * Set the context for this issuance specification.
+     */
+    public void setContext(BigInteger ctx) {
+        context = ctx;
+    }
 }
diff -Naur a/src/com/ibm/zurich/idmx/showproof/ProofSpec.java b/src/com/ibm/zurich/idmx/showproof/ProofSpec.java
--- a/src/com/ibm/zurich/idmx/showproof/ProofSpec.java	2013-07-26 15:27:32.489251978 +0200
+++ b/src/com/ibm/zurich/idmx/showproof/ProofSpec.java	2013-07-26 15:31:53.807234109 +0200
@@ -30,6 +30,8 @@
     private HashMap<String, Identifier> identifierMap;
     /** Predicates. */
     private final Vector<Predicate> predicates;
+    /** Session context. */
+    private BigInteger context;
 
     /**
      * Constructor for proof specifications. Null arguments are initialized as
@@ -154,23 +158,27 @@
      * @return value of spec's context.
      */
     public final BigInteger getContext() {
-        Vector<BigInteger> contextVector = new Vector<BigInteger>();
-
-        // add values of group parametes
-        contextVector = Utils.computeGroupParamContext(gp, contextVector);
-
-        // add values of all issuer public keys (possibly multiple times)
-        Iterator<Predicate> it = predicates.iterator();
-        while (it.hasNext()) {
-            Predicate predicate = it.next();
-            if (predicate instanceof CLPredicate) {
-                IssuerPublicKey pk = ((CLPredicate) predicate)
-                        .getIssuerPublicKey();
-                contextVector = Utils.computeKeyContext(pk, contextVector);
-            }
-        }
-
-        return Utils.hashOf(gp.getSystemParams().getL_H(), contextVector);
+    	if (context == null) {
+	        Vector<BigInteger> contextVector = new Vector<BigInteger>();
+	
+	        // add values of group parametes
+	        contextVector = Utils.computeGroupParamContext(gp, contextVector);
+	
+	        // add values of all issuer public keys (possibly multiple times)
+	        Iterator<Predicate> it = predicates.iterator();
+	        while (it.hasNext()) {
+	            Predicate predicate = it.next();
+	            if (predicate instanceof CLPredicate) {
+	                IssuerPublicKey pk = ((CLPredicate) predicate)
+	                        .getIssuerPublicKey();
+	                contextVector = Utils.computeKeyContext(pk, contextVector);
+	            }
+	        }
+	
+	        return Utils.hashOf(gp.getSystemParams().getL_H(), contextVector);
+    	} else {
+    		return context;
+    	}
     }
 
     /**
@@ -195,4 +203,10 @@
 
     }
 
+    /**
+     * Set the context for the proof specification.
+     */
+    public void setContext(BigInteger ctx) {
+        context = ctx;
+    }
 }
